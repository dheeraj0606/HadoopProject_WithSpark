// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.apache.knox:gateway-shell:0.6.0'
    }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'org.hidetake.ssh' version '1.5.0'
}

// load some common helper methods
apply from: "${projectDir}/../../shared/common-helpers.gradle"

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// set the dependencies for compiling the groovy script
repositories {
    mavenCentral()
}


dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    compile 'org.apache.knox:gateway-shell:0.6.0'
    runtime fileTree(dir: 'lib', include: '*.jar')
}

sourceSets {
    main {
        resources {
            srcDir file('.') include 'truststore.jks' 
        }
    }
}

task ('CreateTrustStore', type:Exec) {

    // this build step will fail if we try to import the certificate into an existing truststore
    delete './truststore.jks'

    // ensure the ssl certificate exists
    if (!file("${projectDir}/../../certificate").exists()) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    // import the BigInsights manager certificate
    commandLine "keytool -import -trustcacerts -alias biginsights -file ${projectDir}/../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt".split()
}

// task to run a script
task('Connect', type: JavaExec) {

    // if running this task with clean, ensure clean runs first
    mustRunAfter clean 

    dependsOn CreateTrustStore
    dependsOn SetupLibs

    environment 'hostname', getMasters(props)['BIGSQL_HEAD'][0]
    environment 'username', props.username
    environment 'password', props.password

    main = 'Example'
    classpath = sourceSets.main.runtimeClasspath
}

task('Example') {
    dependsOn Connect
}
