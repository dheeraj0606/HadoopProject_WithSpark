import groovyx.net.http.RESTClient
import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // we need rest + json to configure zeppelin interpreters
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}

plugins {
  // ssh plugin documentation: https://gradle-ssh-plugin.github.io/docs/
  id 'org.hidetake.ssh' version '1.5.0'
}

def ZEPPELIN='zeppelin-0.6.0-bin-all'

// load some common helper methods
apply from: "${projectDir}/../../shared/common-helpers.gradle"

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

def hiveHost = null
try {
    hiveHost = getMasters(props)['HIVE_SERVER'][0]
} catch (Exception e) {
}

def bigsqlHost = null 
try {
    bigsqlHost = getMasters(props)['BIGSQL_HEAD'][0]
} catch (Exception e) {
}

task CreateTruststore << {

    if (!(new File("${projectDir}/../../certificate").exists())) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    println ">> Remove truststore"
    delete './truststore.jks'

    // import the BigInsights manager certificate
    println ">> Create truststore"
    ant.exec(executable: "${getKeytoolPath()}", dir:'./') {
        arg(line: '-import -trustcacerts -alias biginsights -file ../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt')
    }
}

task Uninstall << {
    ssh.run {
        // remotes.bicluster is defined in shared/common-helpers.gradle
        session(remotes.bicluster) {
            try {
                // initialise kerberos
                execute "kinit -k -t ${props.username}.keytab ${props.username}@IBM.COM"
            } 
            catch (Exception e) {
                println "kinit not found so not renewing kerberos ticket - maybe this is a Basic cluster?"
            }

            put from: "${projectDir}/zeppelin_uninstall.sh", 
                into: "./zeppelin_uninstall.sh"

            // dos2unix incase users have edited on windows
            execute "sed -i 's/\r//' ./zeppelin_uninstall.sh"

            execute "bash ./zeppelin_uninstall.sh"
        }
    }
}

def configureInterpreter = { port, interpreter ->

    def url = "http://localhost:${port}/"

    def client = new RESTClient( url )
    def resp = client.put( 
                    path : "api/interpreter/setting/${interpreter.id}",
                    body : interpreter,
                    requestContentType : 'application/json'
               )

    assert resp.status == 200
}

// configure the livy and spark interpreters
def configureInterpreters = { port ->

    def url = "http://localhost:${port}/"

    def client = new RESTClient( url )
    def resp = client.get( path : 'api/interpreter/setting' )

    assert resp.status == 200

    def json = resp.data.body

    json.each { interpreter ->

       if ( interpreter.name == "spark" ) {
          interpreter.properties['master'] = 'yarn-client'
          configureInterpreter(port, interpreter) 
       }
       if ( interpreter.name == "livy" ) {
          interpreter.properties['livy.spark.master'] = 'yarn-client'
          configureInterpreter(port, interpreter) 
       }
       if ( interpreter.name == "jdbc") {

          if (hiveHost != null) { 
              // configure hive jdbc interpreter
              interpreter.properties['hive.url'] = 'jdbc:hive2://' + hiveHost + ':10000/default;ssl\u003dtrue;sslTrustStore\u003d/home/' + props.username + '/zeppelin_truststore.jks;trustStorePassword\u003dmypassword;'
              interpreter.properties['hive.user'] = props.username
              interpreter.properties['hive.password'] = props.password
          }

          if (bigsqlHost != null) {
              // configure bigsql jdbc interpreter
              interpreter.properties['bigsql.url'] = 'jdbc:db2://' + bigsqlHost + ':51000/bigsql:sslConnection\u003dtrue;sslTrustStoreLocation\u003d/home/' + props.username + '/zeppelin_truststore.jks;Password\u003dmypassword;'
              interpreter.properties['bigsql.user'] = props.username
              interpreter.properties['bigsql.password'] = props.password
              interpreter.properties['bigsql.driver'] = 'com.ibm.db2.jcc.DB2Driver'
          }

          // configure jdbc interpreter dependencies
          interpreter.dependencies = '[{"groupArtifactVersion":"org.apache.hive:hive-jdbc:0.14.0","local":false},{"groupArtifactVersion":"org.apache.hadoop:hadoop-common:2.6.0","local":false,"exclusions":["jdk.tools:jdk.tools:jar:1.6"]},{"groupArtifactVersion":"/home/'+props.username+'/'+ZEPPELIN+'/lib/db2jcc.jar","local":false}]'

          configureInterpreter(port, interpreter)
       }
    }
}

def uploadNotebooks = { port ->

    def url = "http://localhost:${port}/"

    file("${projectDir}/example_notebooks").eachFile { file ->

        // TODO add a verification step - don't upload notebook
        //      if it already exists

        // upload the notebook
        def client = new RESTClient( url )
        def resp = client.post ( 
                        path : "api/notebook",
                        body : file.text,
                        requestContentType : 'application/json'
                   )

        assert resp.status == 201
    }
}

task Install (dependsOn: CreateTruststore) << {

    def zeppelin_env = file("${projectDir}/zeppelin_env.sh")
    def shiro_ini = file("${projectDir}/shiro.ini")

    if (!zeppelin_env.exists()) {
        zeppelin_env.text = file("${projectDir}/zeppelin_env.sh_template").text
    }

    if (!shiro_ini.exists()) {
        shiro_ini.text = file("${projectDir}/shiro.ini_template").text
    }

    def matcher = ( zeppelin_env.text =~ /export\s*ZEPPELIN_PORT=([0-9]+)\s*/ )
    def zeppelin_port = matcher[0][1]


    ssh.run {
        // remotes.bicluster is defined in shared/common-helpers.gradle
        session(remotes.bicluster) {
            try {
                // initialise kerberos
                execute "kinit -k -t ${props.username}.keytab ${props.username}@IBM.COM"
            } 
            catch (Exception e) {
                println "kinit not found so not renewing kerberos ticket - maybe this is a Basic cluster?"
            }

            put from: "${projectDir}/truststore.jks", 
                into: "./zeppelin_truststore.jks"

            put from: "${projectDir}/zeppelin_env.sh", 
                into: "./zeppelin_env.sh"

            put from: "${projectDir}/zeppelin_install.sh", 
                into: "./zeppelin_install.sh"

            // dos2unix incase users have edited files on windows
            execute "sed -i 's/\r//' ./zeppelin_install.sh"
            execute "sed -i 's/\r//' ./zeppelin_env.sh"

            // sparkR setup

            put from: "${projectDir}/setup.R", 
                into: "./setup.R"

            execute "mkdir -p ~/R/packages/"

            def rprofile = file("${projectDir}/Rprofile")

            if (!rprofile.exists()) {
                rprofile.text = file("${projectDir}/Rprofile_template").text
            }

            put from: "${projectDir}/Rprofile", 
                into: "./.Rprofile"

            execute "/usr/iop/current/spark-client/bin/sparkR setup.R"

            // install zeppelin

            execute "bash ./zeppelin_install.sh"

            def local_port = forwardLocalPort hostPort: zeppelin_port.toInteger()

            // FIXME we seem to need to wait for port forwarding to be setup, but
            //       we should have a better mechanism than sleep for ensuring port
            //       forwarding is available

            sleep(10000)

            put from: "${projectDir}/../../downloads/db2jcc.jar",
                into: "./${ZEPPELIN}/lib/db2jcc.jar"

            configureInterpreters(local_port)

            uploadNotebooks(local_port)
            
            // FIXME: we have a window where Zeppelin is running without requiring users to authenticate
            
            put from: "${projectDir}/shiro.ini", 
                into: "./${ZEPPELIN}/conf/shiro.ini"

            execute "sed -i 's/\r//' ~/${ZEPPELIN}/conf/shiro.ini"

            // restart zeppelin
            execute "./${ZEPPELIN}/bin/zeppelin-daemon.sh restart"
        }
    }
}


task Run << {

    def zeppelin_env = file("${projectDir}/zeppelin_env.sh")

    if (!zeppelin_env.exists()) {
        throw new GradleException("** Couldn't find the file 'zeppelin_env.sh'.\n" +
                                  "** Consult the README.md file for more information")
    }

    def matcher = ( zeppelin_env.text =~ /export\s*ZEPPELIN_PORT=([0-9]+)\s*/ )
    def zeppelin_port = matcher[0][1]

    ssh.run {
        session(remotes.bicluster) {
            
            // make sure zeppelin is installed
            try {
                execute "[[ -d ./${ZEPPELIN} ]]"
            } 
            catch (Exception e) {
                throw new GradleException(
                    "Couldn't find the Zeppelin installation.  Try running './gradlew Install'."
                    )
            }
            // make sure zeppelin is running
            execute "./${ZEPPELIN}/bin/zeppelin-daemon.sh status || ./${ZEPPELIN}/bin/zeppelin-daemon.sh start"

          
            def output = """\n\n
                            |- Zeppelin is running.
                            |- Users can connect by creating a ssh tunnel, e.g.
                            |
                            |\$ ssh -L12345:localhost:${zeppelin_port} ssh_username@${remotes.bicluster.host}
                            |
                            |   Where '12345' is a port on the local machine 
                            |         'ssh_username' is the ssh user account name for the user
                            |
                            |- The above command will forward network traffic from their local machine on port 12345
                            |  to the Zeppelin port (${zeppelin_port}) on the BigInsights cluster.
                            |- They will then be able to access Zeppelin by opening a browser on their local machine
                            |  and navigating to the URL: http://localhost:12345 (yes localhost!).
                            |- If port 12345 is not available locally users can use a different port.
                            |- Windows users can setup ssh forwarding with putty.  Search the internet for an example
                            |  e.g. https://www.skyverge.com/blog/how-to-set-up-an-ssh-tunnel-with-putty/"""

            println output.stripMargin() 
        }
    }
}

task Connect << {

    def zeppelin_env = file("${projectDir}/zeppelin_env.sh")

    if (!zeppelin_env.exists()) {
        throw new GradleException("** Couldn't find the file 'zeppelin_env.sh'.\n" +
                                  "** Consult the README.md file for more information")
    }

    def matcher = ( zeppelin_env.text =~ /export\s*ZEPPELIN_PORT=([0-9]+)\s*/ )
    def zeppelin_port = matcher[0][1]

    ssh.run {
        session(remotes.bicluster) {
            
            // make sure zeppelin is installed
            try {
                execute "[[ -d ./${ZEPPELIN} ]]"
            } 
            catch (Exception e) {
                throw new GradleException(
                    "Couldn't find the Zeppelin installation.  Try running './gradlew Install'."
                    )
            }

            // make sure zeppelin is running
            execute "./${ZEPPELIN}/bin/zeppelin-daemon.sh status || ./${ZEPPELIN}/bin/zeppelin-daemon.sh start"

            def local_port = 12345

            if (project.hasProperty('ZEP_PORT')) {
                local_port = project.property('ZEP_PORT').toInteger()
            }

            def port
            try {
                port = forwardLocalPort port: local_port, hostPort: zeppelin_port.toInteger()
            } catch (Exception e) {
                // bind to random port
                port = forwardLocalPort port: 0, hostPort: zeppelin_port.toInteger()
                println ">> Could not bind to ${local_port}, automatically found free port ${port}"
            }

            def console = System.console()
            if (console) {
                def output = "\n\n" +
                    "SSH forwarding localhost:${port} -> BigInsights zeppelin localhost:${zeppelin_port}\n\n" +
                    "You can now access zeppelin from your local machine using the URL: http://localhost:${port}\n\n" +
                    "\n" +
                    "Press ENTER or CTRL+C to quit.\n" +
                    "\n" +
                    "NOTE: - If you quit you will lose your connection to Zeppelin.\n" +
                    "      - After quitting you can execute 'Run' again to connect to Zeppelin.\n" +
                    "      - Gradle will attempt to bind to port 12345 on your local machine.\n" +
                    "        If port 12345 is not available, gradle will automatically allocate a\n" +
                    "        a local port.\n" +
                    "      - You can set the local port with the gradle '-P' argument, E.g.\n" +
                    "         './gradlew Run -PZEP_PORT=23456'\n" +
                    "        make sure port you specify is valid and not occupied on your system.\n\n" 
                console.readLine(output)
            } else {
                logger.error "Cannot get console."
            }
        }
    }
}

['stop', 'start', 'status', 'restart'].each { action ->
task "$action" << {

    def zeppelin_env = file("${projectDir}/zeppelin_env.sh")

    def matcher = ( zeppelin_env.text =~ /export\s*ZEPPELIN_PORT=([0-9]+)\s*/ )
    def zeppelin_port = matcher[0][1]

    ssh.run {
        session(remotes.bicluster) {
            
            // make sure zeppelin is installed
            try {
                execute "[[ -d ./${ZEPPELIN} ]]"
            } 
            catch (Exception e) {
                throw new GradleException(
                    "Couldn't find the Zeppelin installation.  Try running './gradlew Install'."
                    )
            }

            try {
                // execute zeppelin daemon action
                execute "./${ZEPPELIN}/bin/zeppelin-daemon.sh $action"
            } 
            catch (Exception e) {
                // do nothing - ignore error from status command
            }
 
        }
    }
}
}

task UpdateEnv << {

    ssh.run {
        // remotes.bicluster is defined in shared/common-helpers.gradle
        session(remotes.bicluster) {

            // make sure zeppelin is installed
            try {
                execute "[[ -d ./${ZEPPELIN} ]]"
            } 
            catch (Exception e) {
                throw new GradleException(
                    "Couldn't find the Zeppelin installation.  Try running './gradlew Install'."
                    )
            }
            put from: "${projectDir}/zeppelin_env.sh", 
                into: "./${ZEPPELIN}/conf/zeppelin-env.sh"

            put from: "${projectDir}/shiro.ini", 
                into: "./${ZEPPELIN}/conf/shiro.ini"

            execute "sed -i 's/\r//' ~/${ZEPPELIN}/conf/zeppelin-env.sh"
            execute "sed -i 's/\r//' ~/${ZEPPELIN}/conf/shiro.ini"


            println "\n\n"
            println ">> zeppelin_env.sh has been copied to the cluster."
            println ">> shiro.ini has been copied to the cluster."
            println ">> Run `./gradlew restart` to apply your changes."
        }
    }
}
