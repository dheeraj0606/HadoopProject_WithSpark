apply plugin: 'groovy'

// the following apply plugin statement is required to compile and package the MapReduce class
// this is only required for the WebHCatMapReduce Example
    
apply plugin: 'java'

// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.apache.knox:gateway-shell:0.6.0'
    }
}

// set the dependencies for compiling the groovy script and mapreduce classes
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    compile 'org.apache.knox:gateway-shell:0.6.0'
    
    // the following two statements are required to compile the MapReduce class
    // this is only required for the WebHCatMapReduce Example
    
    compile(group: 'org.apache.hadoop', name: 'hadoop-common', version:'2.2.0') { }
    compile(group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version:'2.2.0') { }
}

// tell gradle the groovy script is in the same folder as the build.gradle file
sourceSets {
    main {
        groovy {
            srcDirs = ['.']
        }
        // switch on debug output with ./gradlew Example -PdebugExample
        if (project.hasProperty('debugExample')) {
            resources {
               srcDirs = ['resources']
            }
        }
    }
}


// task to run the groovy script, note that we depend on the
// MapReduce java classes being compiled
task('MapReduce', dependsOn:'jar', type: JavaExec) {

    // package up the MapReduce classes
    jar {
        includes = [ 'org/**' ]
        archiveName = 'hadoop-examples.jar'
        destinationDir = file('samples')
    }

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/../../connection.properties"))

    environment 'gateway', props.gateway
    environment 'username', props.username
    environment 'password', props.password

    main = 'MapReduce'
    classpath = sourceSets.main.runtimeClasspath
}

task('Pig', type: JavaExec) {

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/../../connection.properties"))

    environment 'gateway', props.gateway
    environment 'username', props.username
    environment 'password', props.password

    main = 'Pig'
    classpath = sourceSets.main.runtimeClasspath
}

task('Sqoop', type: JavaExec) {

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/../../connection.properties"))

    environment 'gateway', props.gateway
    environment 'username', props.username
    environment 'password', props.password

    environment 'dashdb_url', props.dashdb_sqoop_url
    environment 'dashdb_username', props.dashdb_sqoop_username
    environment 'dashdb_password', props.dashdb_sqoop_password

    main = 'Sqoop'
    classpath = sourceSets.main.runtimeClasspath
}

task('Hive', type: JavaExec) {

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/../../connection.properties"))

    environment 'gateway', props.gateway
    environment 'username', props.username
    environment 'password', props.password

    main = 'Hive'
    classpath = sourceSets.main.runtimeClasspath
}

task('Example') {

    dependsOn MapReduce, Pig, Hive

}

